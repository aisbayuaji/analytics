<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
  <meta name="description" content="">
  <meta name="author" content="">
  <link href="img/logo/logo.png" rel="icon">
  <title>Analytics - Dashboard</title>
  <link href="./vendor/fontawesome-free/css/all.min.css" rel="stylesheet" type="text/css">
  <link href="./vendor/bootstrap/css/bootstrap.min.css" rel="stylesheet" type="text/css">
  <link href="./css/style.min.css" rel="stylesheet">
   <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
   <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css"/>
  <link rel="stylesheet" href="https://cdn.datatables.net/buttons/2.3.6/css/buttons.dataTables.min.css"/>
  <style>
    .col-auto {
      text-align: initial;
    }
    .dt-buttons {
      margin-left: 10px;
    }
    div.dataTables_wrapper div.dataTables_length select {
    width:50px;
    display:inline-block
    }
  </style>
</head>

<body id="page-top">
  <div id="wrapper">
    <!-- Sidebar -->
    <ul class="navbar-nav sidebar sidebar-light accordion" id="accordionSidebar">
      <a class="sidebar-brand d-flex align-items-center justify-content-center" href="/">
        <div class="sidebar-brand-icon">
          <img src="img/logo/logo2.png">
        </div>
        <div class="sidebar-brand-text mx-3">Company</div>
      </a>
      
      <hr class="sidebar-divider my-0">
      <li class="nav-item active">
        <a class="nav-link" href="/">
          <i class="fas fa-fw fa-tachometer-alt"></i>
          <span>Dashboard</span></a>
      </li>
      <hr class="sidebar-divider">
      <div class="sidebar-heading">
        Menu
      </div>
      <li class="nav-item">
        <a class="nav-link" href="/laporan" >
          <i class="far fa-fw fa-file-alt"></i>
          <span>Data Laporan</span>
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/add-data">
          <i class="fas fa-plus fa-fw"></i>
          <span>Tambah Data</span>
        </a>
      </li>
      <hr class="sidebar-divider">
      <div class="sidebar-heading">
        Pengaturan
      </div>
      
      <li class="nav-item">
        <a class="nav-link" href="/kategori-akun">
          <i class="fas fa-fw fa-list-alt"></i>
          <span>Data Akun</span>
        </a>
      </li>
     
      <!-- <li class="nav-item">
        <a class="nav-link collapsed" href="#" data-toggle="collapse" data-target="#collapseBootstrap"
          aria-expanded="true" aria-controls="collapseBootstrap">
          <i class="fas fa-fw fa-list-alt"></i>
          <span>Daftar Akun</span>
        </a>
        <div id="collapseBootstrap" class="collapse" aria-labelledby="headingBootstrap" data-parent="#accordionSidebar">
          <div class="bg-white py-2 collapse-inner rounded">
            <a class="collapse-item" href="/kategori-akun">Kategori</a>
            <a class="collapse-item" href="/data-akun">Akun</a>
          </div>
        </div>
      </li> -->
      <% if(jabatan == "Pinca"){ %>
      <li class="nav-item">
        <a class="nav-link" href="/user-data">
          <i class="fas fa-user fa-fw "></i>
          <span>Data User</span>
        </a>
      </li>
      <% } %>
      <li class="nav-item">
        <a class="nav-link" href="/pengaturan">
          <i class="fas fa-cog fa-fw "></i>
          <span>Pengaturan Akun</span>
        </a>
      </li>
      
    </ul>
    <!-- Sidebar -->
    <div id="content-wrapper" class="d-flex flex-column">
      <div id="content">
        <!-- TopBar -->
        <nav class="navbar navbar-expand navbar-light bg-navbar topbar mb-4 static-top">
          <button id="sidebarToggleTop" class="btn btn-link rounded-circle mr-3">
            <i class="fa fa-bars"></i>
          </button>
          <ul class="navbar-nav ml-auto">
            <li class="nav-item dropdown no-arrow mx-1">
                <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown"
                  aria-haspopup="true" aria-expanded="false">
                  <i class="fas fa-fw fa-building"></i>
                  <span class="badge badge-danger badge-counter">1+</span>
                </a>
                <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in"
                  aria-labelledby="alertsDropdown">
                  <h6 class="dropdown-header">
                    System
                  </h6>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="mr-3">
                      <div class="icon-circle bg-primary">
                        <i class="fas fa-fw fa-star text-white"></i>
                      </div>
                    </div>
                    <div>
                      <div class="small text-gray-500">Unit Saat Ini</div>
                      <span class="font-weight-bold"><%= unit %></span>
                    </div>
                  </a>
                  
                </div>
              </li>
            <li class="nav-item dropdown no-arrow mx-1">
                <a class="nav-link dropdown-toggle" href="#" id="alertsDropdown" role="button" data-toggle="dropdown"
                  aria-haspopup="true" aria-expanded="false">
                  <i class="fas fa-bell fa-fw"></i>
                  <span class="badge badge-danger badge-counter">1+</span>
                </a>
                <div class="dropdown-list dropdown-menu dropdown-menu-right shadow animated--grow-in"
                  aria-labelledby="alertsDropdown">
                  <h6 class="dropdown-header">
                    System
                  </h6>
                  <a class="dropdown-item d-flex align-items-center" href="#">
                    <div class="mr-3">
                      <div class="icon-circle bg-primary">
                        <i class="fas fa-fw fa-handshake text-white"></i>
                      </div>
                    </div>
                    <div>
                      <div class="small text-gray-500">Admin</div>
                      <span class="font-weight-bold">Selamat datang!</span>
                    </div>
                  </a>
                  
                </div>
              </li>
            <div class="topbar-divider d-none d-sm-block"></div>
            <li class="nav-item dropdown no-arrow">
              <a class="nav-link dropdown-toggle" href="#" id="userDropdown" role="button" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false">
                <img class="img-profile rounded-circle" src="img/boy.png" style="max-width: 60px">
                <span class="ml-2 d-none d-lg-inline text-white small"><%= username %>
                </span>
              </a>
              <div class="dropdown-menu dropdown-menu-right shadow animated--grow-in" aria-labelledby="userDropdown">
                <div class="dropdown-divider"></div>
                <a class="dropdown-item" onclick="logout()" data-toggle="modal" data-target="#logoutModal">
                    <i class="fas fa-sign-out-alt fa-sm fa-fw mr-2 text-gray-400"></i>
                    Logout
                  </a>
              </div>
            </li>
          </ul>
        </nav>

        <div class="container">
            <%- body %>
        </div>
       

      </div>
    </div>
  </div>

      </tbody>
    </table>
  </div>
  
  <!-- Scroll to top -->
  <a class="scroll-to-top rounded" href="#page-top">
    <i class="fas fa-angle-up"></i>
  </a>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
  <script src="../vendor/jquery/jquery.min.js"></script>
  <script src="../vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="../vendor/jquery-easing/jquery.easing.min.js"></script>
  <script src="../js/ruang-admin.min.js"></script>
  <script src="../vendor/chart.js/Chart.min.js"></script>
  <script src="../js/demo/chart-area-demo.js"></script>  
  <script src="../vendor/datatables/jquery.dataTables.min.js"></script>
  <script src="../vendor/datatables/dataTables.bootstrap4.min.js"></script>
  <script src="../vendor/datatables/buttons.html5.min.js"></script>
  <script src="../vendor/datatables/dataTables.buttons.js"></script>
  
  
  <script src="https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.html5.min.js"></script>
  <script src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.print.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.3.1/jspdf.umd.min.js"></script>
</body>

</html>

<script>
   document.addEventListener('DOMContentLoaded', function() {
      const selectData = document.getElementById('selectData');
      const showDataBtn = document.getElementById('showDataBtn');
      const ctx = document.getElementById('chartGaris').getContext('2d');
      let myChart;
      async function getData(selectedUnit) {
          try {
            const response = await fetch('/dataChart/' + selectedUnit);
            if (!response.ok) {
              throw new Error('Terjadi kesalahan saat mengambil data.');
            }
            const data = await response.json();
            updateChart(data, selectedUnit); 
          } catch (error) {
            console.error('Error:', error);
          }
        }

      showDataBtn.addEventListener('click', function() {
        const selectedUnit = selectData.value;
        const data = getData(selectedUnit);
        updateChart(data, selectedUnit);
      });
    
      function updateChart(data, selectData) {
        if (myChart) {
          myChart.destroy(); 
        }
        const totalsaldo = data.map(item => item.total_saldo);
        const bulan = data.map(item => item.bulan);
        myChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels:bulan, 
            datasets: [{
              label: 'Data Bulanan Unit' + ' ' + selectData + ' (dalam juta-an)',
              data: totalsaldo,
              borderColor: 'blue',
              backgroundColor: 'rgba(0, 0, 255, 0.1)',
              fill: true,
            }]
          },
          options: {
          }
        });
      }
      updateChart(getData('Tes')); 
    });


$(document).ready(function () {
   const tabel = $('#datatemplate').DataTable({
        dom: "lBfrtip",
        buttons: [
            {
                extend: 'excel',
                text: 'Download Excel',
                className: 'btn btn-success',
                filename: 'Template',
                title: '',
                
            }
        ],
        lengthMenu: [10, 25, 50, 100],
    });
    $('#downloadExcel').on('click', function (e) {
      tabel.button('.buttons-excel').trigger();
    });
  });


function logout() {
    Swal.fire({
      title: 'Apakah anda yakin?',
      text: 'Anda akan logout',
      icon: 'warning',
      showCancelButton: true,
      confirmButtonText: 'Ya, logout',
      cancelButtonText: 'Batal'
    }).then((result) => {
      if (result.isConfirmed) {
        window.location.href = '/logout';
      }
    });
  }

  $(document).ready(function () {
    $('#dataTableHover').DataTable({
        dom: "lBfrtip",
        buttons: [
        ],
        lengthMenu: [10, 25, 50, 100],
        
    });
});


function addAkun() {

    fetch('/data-kategori')
    .then(response => {
      if (!response.ok) {
        throw new Error('Terjadi kesalahan saat mengambil data cabang.');
      }
      return response.json();
    })
    .then(data => {
      const katerioptions = data.map(kategori => `<option value="${kategori.kategori}">${kategori.kategori}</option>`).join('');

  Swal.fire({
    title: '<h4>+ Tambah Akun Baru</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Akun</label>
        </div>
        <div class="col-auto">
          <input name="akun" class="form-control" placeholder="Masukkan nama akun baru" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
            <div class="col-auto">
              <label for="swal-input3" class="col-form-label">Kategori</label>
            </div>
            <div class="col-auto">
              <select name="kategori" class="form-control" required>
                <option value="" disabled selected>Pilih Kategori</option>
                ${katerioptions}
              </select>
            </div>
        </div>
    `,
    showCancelButton: true,
    confirmButtonText: 'Tambah',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const akun = Swal.getPopup().querySelector('[name="akun"]').value;
      const kategori = Swal.getPopup().querySelector('[name="kategori"]').value;
      if (!kategori || !akun) {
        Swal.showValidationMessage('Kategori dan Akun harus diisi');
        return false;
      }

      return {akun:akun, kategori:kategori };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        akun: result.value.akun,
        kategori: result.value.kategori
      };

      fetch('/add-akun', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menambah akun.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Akun ditambahkan!', '', 'success');
        window.location.href = '/data-akun';
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menambah akun.', 'error');
      });
    }
  });
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data unit.', 'error');
    });
}


function addKategori() {
  Swal.fire({
    title: '<h4>+ Tambah Kategori Baru</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Kategori</label>
        </div>
        <div class="col-auto">
          <input name="kategori" class="form-control" placeholder="Masukkan kategori baru" autofocus required>
        </div>
      </div>
    `,
    showCancelButton: true,
    confirmButtonText: 'Tambah',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const kategori = Swal.getPopup().querySelector('[name="kategori"]').value;
      if (!kategori) {
        Swal.showValidationMessage('Kategori harus diisi');
        return false;
      }

      return {kategori:kategori };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        kategori: result.value.kategori
      };

      fetch('/add-kategori', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menambah user.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Kategori ditambahkan!', '', 'success');
        window.location.href = '/kategori-akun';
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menambah kategori.', 'error');
      });
    }
  });
}

function editKategori(id, nama_kategori, pn, nama_pekerja, kode_uker, nama_uker){
  Swal.fire({
    title: '<h4>Edit Kategori Akun</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Kategori</label>
        </div>
        <div class="col-auto">
          <input name="nama_kategori" value="${nama_kategori}" class="form-control" placeholder="Masukkan kategori" autofocus>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">PN</label>
        </div>
        <div class="col-auto">
          <input name="pn" value="${pn}" class="form-control"  autofocus>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Kategori</label>
        </div>
        <div class="col-auto">
          <input name="nama_pekerja" value="${nama_pekerja}" class="form-control" autofocus>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Kode Uker</label>
        </div>
        <div class="col-auto">
          <input name="kode_uker" value="${kode_uker}" class="form-control" autofocus>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Uker</label>
        </div>
        <div class="col-auto">
          <input name="nama_uker" value="${nama_uker}" class="form-control" autofocus>
        </div>
      </div>
    `,
    showCancelButton: true,
    confirmButtonText: 'Simpan',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const nama_kategori = Swal.getPopup().querySelector('[name="nama_kategori"]').value;
      const pn = Swal.getPopup().querySelector('[name="pn"]').value;
      const nama_pekerja = Swal.getPopup().querySelector('[name="nama_pekerja"]').value;
      const kode_uker = Swal.getPopup().querySelector('[name="kode_uker"]').value;
      const nama_uker = Swal.getPopup().querySelector('[name="nama_uker"]').value;

      return { nama_kategori: nama_kategori, pn: pn, nama_pekerja:nama_pekerja, kode_uker:kode_uker, nama_uker:nama_uker};
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        nama_kategori: result.value.nama_kategori,
        pn: result.value.pn,
        nama_pekerja: result.value.nama_pekerja,
        kode_uker: result.value.kode_uker,
        nama_uker: result.value.nama_uker


      };

      fetch(`/edit-kategori/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat mengedit kategori.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Kategori diubah!', '', 'success');
        window.location.href = '/kategori-akun';
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal mengedit kategori.', 'error');
      });
    }
  });
}

function deleteKategori(id) {
  Swal.fire({
    title: 'Hapus Kategori',
    text: 'Anda yakin ingin menghapus kategori ini?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Ya, Hapus',
    cancelButtonText: 'Batal',
    confirmButtonColor: '#dc3545',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/delete-kategori/${id}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menghapus kategori.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Kategori dihapus!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menghapus kategori.', 'error');
      });
    }
  });
}

function deleteAkun(id) {
  Swal.fire({
    title: 'Hapus Akun',
    text: 'Anda yakin ingin menghapus akun ini?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Ya, Hapus',
    cancelButtonText: 'Batal',
    confirmButtonColor: '#dc3545',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/delete-akun/${id}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menghapus akun.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Akun dihapus!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menghapus akun.', 'error');
      });
    }
  });
}


function editAkun(id, akun, kategori) {

fetch('/data-kategori')
.then(response => {
  if (!response.ok) {
    throw new Error('Terjadi kesalahan saat mengambil data cabang.');
  }
  return response.json();
})
.then(data => {
    const katerioptions = data.map(kategoriData => `<option value="${kategoriData.kategori}" ${kategoriData.kategori == kategori ? 'selected' : ''}>${kategoriData.kategori}</option>`).join('');

Swal.fire({
title: '<h4>+ Edit Akun</h4>',
html: `
  <div class="align-items-center">
    <div class="col-auto">
      <label for="swal-input1" class="col-form-label">Nama Akun</label>
    </div>
    <div class="col-auto">
      <input name="akun" value="${akun}" class="form-control" placeholder="Masukkan nama akun baru" autofocus required>
    </div>
  </div>
  <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input3" class="col-form-label">Kategori</label>
        </div>
        <div class="col-auto">
          <select name="kategori" class="form-control" required>
            <option value="" disabled selected>Pilih Kategori</option>
            ${katerioptions}
          </select>
        </div>
    </div>
`,
showCancelButton: true,
confirmButtonText: 'Tambah',
cancelButtonText: 'Batal',
preConfirm: () => {
  const akun = Swal.getPopup().querySelector('[name="akun"]').value;
  const kategori = Swal.getPopup().querySelector('[name="kategori"]').value;
  if (!kategori || !akun) {
    Swal.showValidationMessage('Kategori dan Akun harus diisi');
    return false;
  }

  return {akun:akun, kategori:kategori };
}
}).then((result) => {
if (result.isConfirmed) {
  const postData = {
    akun: result.value.akun,
    kategori: result.value.kategori
  };

  fetch(`/edit-akun/${id}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify(postData)
  })
  .then(response => {
    if (!response.ok) {
      throw new Error('Terjadi kesalahan saat edit user.');
    }
    return response.json();
  })
  .then(data => {
    console.log(data);
    Swal.fire('Akun berhasil diedit!', '', 'success');
    window.location.href = '/data-akun';
  })
  .catch(error => {
    console.error('Error:', error);
    Swal.fire('Terjadi kesalahan!', 'Gagal edit akun.', 'error');
  });
}
});
})
.catch(error => {
  console.error('Error:', error);
  Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data.', 'error');
});
}

function addUnit() {
  Swal.fire({
    title: '<h4>+ Tambah Unit Baru</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama Unit</label>
        </div>
        <div class="col-auto">
          <input name="unit" class="form-control" placeholder="Masukkan unit baru" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Kode Unit</label>
        </div>
        <div class="col-auto">
          <input name="kode_unit" class="form-control" placeholder="Masukkan kode unit baru" autofocus required>
        </div>
      </div>
    `,
    showCancelButton: true,
    confirmButtonText: 'Tambah',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const unit = Swal.getPopup().querySelector('[name="unit"]').value;
      const kode_unit = Swal.getPopup().querySelector('[name="kode_unit"]').value;
      if (!unit || !kode_unit) {
        Swal.showValidationMessage('Tidak boleh kosong');
        return false;
      }

      return {unit:unit, kode_unit:kode_unit };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        unit: result.value.unit,
        kode_unit: result.value.kode_unit
      };

      fetch('/add-unit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menambah unit.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Unit ditambahkan!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menambah unit.', 'error');
      });
    }
  });
}

function deleteUnit(id) {
  Swal.fire({
    title: 'Hapus Unit',
    text: 'Anda yakin ingin menghapus unit ini?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Ya, Hapus',
    cancelButtonText: 'Batal',
    confirmButtonColor: '#dc3545',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/delete-unit/${id}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menghapus unit.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Unit dihapus!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menghapus unit.', 'error');
      });
    }
  });
}

function uploadData(jabatan, unit, bulan, tahun) {
  Swal.fire({
        title: '<h4 class="mb-4">Upload Laporan</h4>',
        html: `
        </div>
        </div class="align-items-center">
          <div class="col-auto">
                <label for="swal-input3" class="col-form-label">Upload Data</label>
          </div>
          <div class="col-auto">
          <input type="file" id="uploadFile" accept=".csv,.xlsx" class="form-control mb-3">
          <div id="fileInfo"></div>
          </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Upload',
        cancelButtonText: 'Cancel',
        preConfirm: () => {
          const fileInput = document.getElementById('uploadFile');
          const file = fileInput.files[0];

          if (!file) {
            Swal.showValidationMessage('Please select a file');
            return false;
          }

          const formData = new FormData();
          formData.append('file', file);
          return fetch(`/upload-data`, {
            method: 'POST',
            body: formData
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Error uploading file.');
              }
              return response.json();
            })
            .then(data => {
              Swal.fire('File uploaded successfully!', '', 'success');
              window.location.reload();
            })
            .catch(error => {
              Swal.fire('Error!', 'Failed to upload file.', 'error');
            });
        }
      });
   
}
function detailData(tgl, nama_user, unit) {
  fetch(`/data-detail/${tgl}/${nama_user}/${unit}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Terjadi kesalahan saat mengambil data.');
      }
      return response.json();
    })
    .then(data => {
      let swalContent = '<table style="width:100%;text-align:left;"></tr>';

      Object.keys(data).forEach((category) => {
          swalContent += `<tr><td colspan="1" style="font-weight:bold;">${category}</td></tr>`;
          data[category].forEach((account) => {
              swalContent += `<tr><td>${account[0]}</td><td>${account[1]}</td></tr>`;
          });
      });

      swalContent += '</table>';



      Swal.fire({
        title: `<h4>Data Laporan ${unit}<br><h6> ${tgl}</h6></h4>`,
        html: swalContent
      });
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data.', 'error');
    });
}


function deleteData(tgl, nama_user) {
  Swal.fire({
    title: 'Hapus Data',
    text: 'Anda yakin ingin menghapus data ini?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Ya, Hapus',
    cancelButtonText: 'Batal',
    confirmButtonColor: '#dc3545',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/delete-data/${tgl}/${nama_user}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menghapus data.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Data dihapus!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menghapus data.', 'error');
      });
    }
  });
}

document.getElementById('bulanSelect').addEventListener('change', function() {
  var selectedMonth = this.value;
  var unit = document.getElementById('selectData').value;
  console.log(selectedMonth, unit)
  refreshData(selectedMonth, unit);
});

document.getElementById('selectBulanData').addEventListener('change', function() {
  var selectedMonth = this.value;
  var unit = document.getElementById('selectData').value;
  console.log(selectedMonth, unit)
  refreshDataLaporan(selectedMonth, unit);
});



function refreshData(selectedMonth, unit) {
  fetch(`/data-perbulan/${selectedMonth}/${unit}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      renderData(data);
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });
}

function renderData(data) {
  var hasilData = document.getElementById('hasilData');
  hasilData.innerHTML = ''; 

  data.forEach(item => {
    var div = document.createElement('div');
    div.className = 'mb-3';
    div.innerHTML = `
      <div class="small text-gray-500">${item.kategori}
        <div class="small float-right"><b>${item.total_saldo} dari ${item.total_rka}</b></div>
      </div>
      <div class="progress" style="height: 12px;">
        <div class="progress-bar bg-warning" role="progressbar" style="width: ${item.total_capai}%" aria-valuenow="80"
          aria-valuemin="0" aria-valuemax="100"></div>
      </div>
    `;
    hasilData.appendChild(div); 
  });
}


function refreshDataLaporan(selectedMonth, unit) {
  fetch(`/laporan-detail/${selectedMonth}/${unit}`)
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      renderDataLaporan(data);
    })
    .catch(error => {
      console.error('There was a problem with the fetch operation:', error);
    });
}

// Object.keys(data).forEach((category) => {
//           swalContent += `<tr><td colspan="1" style="font-weight:bold;">${category}</td></tr>`;
//           data[category].forEach((account) => {
//               swalContent += `<tr><td>${account[0]}</td><td>${account[1]}</td></tr>`;
//           });
//       });

function renderDataLaporan(data) {
  var hasilData = document.getElementById('hasiltabel');
  hasilData.innerHTML = '';

  Object.keys(data).forEach((category) => {
    var categoryRow = document.createElement('tr');
    var categoryCell = document.createElement('td');
    categoryCell.colSpan = 2;
    categoryCell.style.fontWeight = 'bold';
    categoryCell.textContent = category;
    categoryRow.appendChild(categoryCell);
    hasilData.appendChild(categoryRow);

    data[category].forEach((account) => {
      var accountRow = document.createElement('tr');
      var accountCell1 = document.createElement('td');
      var accountCell2 = document.createElement('td');
      var accountCell3 = document.createElement('td');
      var accountCell4 = document.createElement('td');
      accountCell1.textContent = account[0];
      accountCell2.textContent = account[1];
      accountCell3.textContent = account[2];
      accountCell4.textContent = account[3];
      accountRow.appendChild(accountCell1);
      accountRow.appendChild(accountCell2);
      accountRow.appendChild(accountCell3);
      accountRow.appendChild(accountCell4);
      hasilData.appendChild(accountRow);
    });
  });
}

function filterLaporan() {
    fetch('/unit-all')
        .then(response => {
            if (!response.ok) {
                throw new Error('Terjadi kesalahan saat mengambil data unit.');
            }
            return response.json();
        })
        .then(units => {
            let unitOptions = units.map(unitData => `<option value="${unitData.kategori}">${unitData.kategori}</option>`).join('');
            Swal.fire({
                title: 'Filter Data',
                html: `
                    <div>
                        <label for="swal-input3" class="col-form-label">Pilih Kategori</label>
                    </div>
                    <div>
                        <select name="kategori" required class="form-select mb-3">
                            <option value="" disabled selected>Pilih Kategori</option>
                            ${unitOptions}
                        </select>
                    </div>
                    <div>Keterangan :</div>
                    <div>
                    <select name="keterangan" class="form-select mb-3">
                        <option disabled selected>Pilih Keterangan</option>
                        <option value="Pinjaman">Pinjaman</option>
                        <option value="Simpanan">Simpanan</option>
                        <option value="Kolektibilitas Lancar">Kolektibilitas Lancar</option>
                        <option value="Kolektibilitas DPK 1">Kolektibilitas DPK 1</option>
                        <option value="Kolektibilitas DPK 2">Kolektibilitas DPK 2</option>
                        <option value="Kolektibilitas DPK 3">Kolektibilitas DPK 3</option>
                        <option value="Kolektibilitas Kurang Lancar">Kolektibilitas Kurang Lancar</option>
                        <option value="Kolektibilitas Diragukan">Kolektibilitas Diragukan</option>
                        <option value="Kolektibilitas Macet">Kolektibilitas Macet</option>
                    </select>
                    </div>
                    <div>Pilih Bulan Awal :</div>
                    <select name="bulanAwal" class="form-select mb-3">
                        <option disabled selected>Pilih Bulan</option>
                        <option value="01">Januari</option>
                        <option value="02">Februari</option>
                        <option value="03">Maret</option>
                        <option value="04">April</option>
                        <option value="05">Mei</option>
                        <option value="06">Juni</option>
                        <option value="07">Juli</option>
                        <option value="08">Agustus</option>
                        <option value="09">September</option>
                        <option value="10">Oktober</option>
                        <option value="11">November</option>
                        <option value="12">Desember</option>
                    </select>
                    <select name="tahunAwal" class="form-select mb-3">
                        <option disabled selected>Pilih Tahun</option>
                        <option value="2020">2020</option>
                        <option value="2021">2021</option>
                        <option value="2022">2022</option>
                        <option value="2023">2023</option>
                        <option value="2024">2024</option>
                        <option value="2025">2025</option>
                        <option value="2026">2026</option>
                    </select>
                    <div>Pilih Bulan Akhir :</div>
                    <select name="bulanAkhir" class="form-select mb-3">
                        <option disabled selected>Pilih Bulan</option>
                        <option value="01">Januari</option>
                        <option value="02">Februari</option>
                        <option value="03">Maret</option>
                        <option value="04">April</option>
                        <option value="05">Mei</option>
                        <option value="06">Juni</option>
                        <option value="07">Juli</option>
                        <option value="08">Agustus</option>
                        <option value="09">September</option>
                        <option value="10">Oktober</option>
                        <option value="11">November</option>
                        <option value="12">Desember</option>
                    </select>
                    <select name="tahunAkhir" class="form-select">
                        <option disabled selected>Pilih Tahun</option>
                        <option value="2020">2020</option>
                        <option value="2021">2021</option>
                        <option value="2022">2022</option>
                        <option value="2023">2023</option>
                        <option value="2024">2024</option>
                        <option value="2025">2025</option>
                        <option value="2026">2026</option>
                    </select>
                `,
                showCancelButton: true,
                confirmButtonText: 'Proses',
                cancelButtonText: 'Batal',
                preConfirm: () => {
                    const bulanAwal = Swal.getPopup().querySelector('[name="bulanAwal"]').value;
                    const tahunAwal = Swal.getPopup().querySelector('[name="tahunAwal"]').value;
                    const bulanAkhir = Swal.getPopup().querySelector('[name="bulanAkhir"]').value;
                    const tahunAkhir = Swal.getPopup().querySelector('[name="tahunAkhir"]').value;
                    const kategori = Swal.getPopup().querySelector('[name="kategori"]').value;
                    const keterangan = Swal.getPopup().querySelector('[name="keterangan"]').value;
                    return { bulanAwal, tahunAwal, bulanAkhir, tahunAkhir, kategori, keterangan };
                }
            }).then((result) => {
                if (result.isConfirmed) {
                    const postData = {
                        kategori: result.value.kategori,
                        bulanAwal: result.value.bulanAwal,
                        tahunAwal: result.value.tahunAwal,
                        bulanAkhir: result.value.bulanAkhir,
                        tahunAkhir: result.value.tahunAkhir,
                        keterangan: result.value.keterangan,
                    };
                    fetch('/laporan', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(postData)
                    })
                        .then(response => {
                            if (!response.ok) {
                                throw new Error('Error Mengambil Data.');
                            }
                            return response.json();
                        })
                        .then(data => {
                            const tbody = document.querySelector('#dataTableHover tbody');
                            tbody.innerHTML = ''; 
                            data.forEach((item, index) => {
                                const formattedDate = formatDate(item.tanggal_report);
                                const formattedPencapaian = formatPencapaian(item.pencapaian);
                                const row = `<tr>
                                    <td>${index + 1}</td>
                                    <td>${formattedDate}</td>
                                    <td>${item.kategori}</td>
                                    <td>${item.keterangan}</td>
                                    <td>${item.posisi}</td>
                                    <td>${item.rka}</td>
                                    <td>${formattedPencapaian}</td>
                                </tr>`;
                                tbody.innerHTML += row;
                            });
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            });
        })
        .catch(error => {
            console.error('Error:', error);
            Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data unit.', 'error');
        });
}

function formatDate(dateString) {
    const date = new Date(dateString);
    const day = String(date.getDate()).padStart(2, '0');
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const year = date.getFullYear();
    return `${day}/${month}/${year}`;
}

function formatPencapaian(pencapaian) {
    const percentage = (pencapaian * 100).toFixed(2); 
    return `${percentage}%`;
}


function addUser(jabatan) {
  let jabatanOptions ='';
  if(jabatan == "Pinca"){
    jabatanOptions = '<option value="MBM">MBM</option><option value="Kaunit">Kaunit</option><option value="Pinca">Pinca</option>';
  }else{
    jabatanOptions = '<option value="Kaunit">Kaunit</option>';
  }
  
  fetch('/unit-all')
        .then(response => {
            if (!response.ok) {
                throw new Error('Terjadi kesalahan saat mengambil data unit.');
            }
            return response.json();
        })
        .then(units => {
            let unitOptions = units.map(unitData => `<option value="${unitData.unit}">${unitData.unit}</option>`).join('');
  Swal.fire({
    title: '<h4>+ Tambah User Baru</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Kode User</label>
        </div>
        <div class="col-auto">
          <input name="kode_user" class="form-control" placeholder="Masukkan kode user" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama User</label>
        </div>
        <div class="col-auto">
          <input name="username" class="form-control" placeholder="Masukkan username" autofocus required>
        </div>
      </div>
     
      <div class="align-items-center">
            <div class="col-auto">
              <label for="swal-input3" class="col-form-label">Jabatan</label>
            </div>
            <div class="col-auto">
              <select name="jabatan" class="form-control" required>
                <option value="" disabled selected>Pilih Jabatan</option>
                ${jabatanOptions}
              </select>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Password</label>
        </div>
        <div class="col-auto">
          <input name="password" class="form-control" placeholder="Masukkan Password" autofocus required>
        </div>
      </div>
      
    `,
    showCancelButton: true,
    confirmButtonText: '+ Tambah',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const kode_user = Swal.getPopup().querySelector('[name="kode_user"]').value;
      const username = Swal.getPopup().querySelector('[name="username"]').value;
      const jabatan = Swal.getPopup().querySelector('[name="jabatan"]').value;
      const password= Swal.getPopup().querySelector('[name="password"]').value;
      if (!unit || !kode_user|| !username || !jabatan || !password) {
        Swal.showValidationMessage('Tidak boleh kosong');
        return false;
      }

      return {kode_user:kode_user, username:username,jabatan:jabatan,unit:unit,password:password };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        kode_user: result.value.kode_user,
        username: result.value.username,
        jabatan: result.value.jabatan,
        password: result.value.password
      };

      fetch('/add-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menambah user.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('User ditambahkan!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menambah user.', 'error');
      });
    }
  });
})
        .catch(error => {
            console.error('Error:', error);
            Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data unit.', 'error');
        });
}


function deleteUser(id) {
  Swal.fire({
    title: 'Hapus Pengguna',
    text: 'Anda yakin ingin menghapus pengguna ini?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonText: 'Ya, Hapus',
    cancelButtonText: 'Batal',
    confirmButtonColor: '#dc3545',
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/delete-user/${id}`, {
        method: 'DELETE',
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menghapus user.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Pengguna dihapus!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menghapus user.', 'error');
      });
    }
  });
}


function editUser(id,username,unit, jabatan, kode_user){
  let jabatanOptions ='';

    if(jabatan == "Pinca"){
      jabatanOptions = '<option value="Pinca" selected>Pinca</option><option value="MBM">MBM</option><option value="Kaunit">Kaunit</option>';
    }else if(jabatan == "MBM"){
      jabatanOptions = '<option value="Pinca">Pinca</option><option value="MBM" selected>MBM</option><option value="Kaunit">Kaunit</option>';
    }else{
      jabatanOptions = '<option value="Pinca">Pinca</option><option value="MBM">MBM</option><option value="Kaunit" selected>Kaunit</option>';
    }
  
  
  fetch('/unit-all')
        .then(response => {
            if (!response.ok) {
                throw new Error('Terjadi kesalahan saat mengambil data unit.');
            }
            return response.json();
        })
        .then(units => {
            let unitOptions = units.map(unitData => `<option value="${unitData.unit}"  ${unitData.unit == unit ? 'selected' : ''}>${unitData.unit}</option>`).join('');
  Swal.fire({
    title: '<h4>+ Tambah User Baru</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Kode User</label>
        </div>
        <div class="col-auto">
          <input name="kode_user" value="${kode_user}" class="form-control" placeholder="Masukkan kode user" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Nama User</label>
        </div>
        <div class="col-auto">
          <input name="username" value="${username}" class="form-control" placeholder="Masukkan username" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
            <div class="col-auto">
              <label for="swal-input3" class="col-form-label">Unit</label>
            </div>
            <div class="col-auto">
              <select name="jabatan" class="form-control" required>
                <option value="" disabled selected>Pilih Jabatan</option>
                ${jabatanOptions}
              </select>
      </div>
      
    `,
    showCancelButton: true,
    confirmButtonText: 'Edit',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const kode_user = Swal.getPopup().querySelector('[name="kode_user"]').value;
      const username = Swal.getPopup().querySelector('[name="username"]').value;
      const jabatan = Swal.getPopup().querySelector('[name="jabatan"]').value;
      if (!kode_user|| !username || !jabatan ) {
        Swal.showValidationMessage('Tidak boleh kosong');
        return false;
      }

      return {kode_user:kode_user, username:username,jabatan:jabatan};
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        kode_user: result.value.kode_user,
        username: result.value.username,
        jabatan: result.value.jabatan
      };

      fetch(`/edit-user/${id}`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat menambah unit.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('User berhasil diedit!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal menambah unit.', 'error');
      });
    }
  });
})
        .catch(error => {
            console.error('Error:', error);
            Swal.fire('Terjadi kesalahan!', 'Gagal mengambil data unit.', 'error');
        });
}


function ubahPassword() {
  Swal.fire({
    title: '<h4>Ubah Password</h4>',
    html: `
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Password Lama</label>
        </div>
        <div class="col-auto">
          <input name="password_lama" class="form-control" placeholder="Masukkan password lama" autofocus required>
        </div>
      </div>
      <div class="align-items-center">
        <div class="col-auto">
          <label for="swal-input1" class="col-form-label">Password Baru</label>
        </div>
        <div class="col-auto">
          <input name="password_baru" class="form-control" placeholder="Masukkan password baru" autofocus required>
        </div>
      </div>
    `,
    showCancelButton: true,
    confirmButtonText: 'Tambah',
    cancelButtonText: 'Batal',
    preConfirm: () => {
      const password_lama = Swal.getPopup().querySelector('[name="password_lama"]').value;
      const password_baru = Swal.getPopup().querySelector('[name="password_baru"]').value;
      if (!password_baru || !password_lama) {
        Swal.showValidationMessage('Tidak boleh kosong');
        return false;
      }

      return {password_baru:password_baru, password_lama:password_lama };
    }
  }).then((result) => {
    if (result.isConfirmed) {
      const postData = {
        password_lama: result.value.password_lama,
        password_baru: result.value.password_baru
      };

      fetch('/ubah-password', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(postData)
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Terjadi kesalahan saat mengubah password.');
        }
        return response.json();
      })
      .then(data => {
        console.log(data);
        Swal.fire('Password berhasil diubah!', '', 'success');
        window.location.reload();
      })
      .catch(error => {
        console.error('Error:', error);
        Swal.fire('Terjadi kesalahan!', 'Gagal mengubah password.', 'error');
      });
    }
  });
}

function addakunkategori() {
      Swal.fire({
        title: '<h4 class="mb-4">Upload Data Akun</h4>',
        html: `
        </div>
        </div class="align-items-center">
          <div class="col-auto">
                <label for="swal-input3" class="col-form-label">Upload Data</label>
          </div>
          <div class="col-auto">
          <input type="file" id="uploadFile" accept=".csv,.xlsx" class="form-control mb-3">
          <div id="fileInfo"></div>
          </div>
        `,
        showCancelButton: true,
        confirmButtonText: 'Upload',
        cancelButtonText: 'Cancel',
        preConfirm: () => {
          const fileInput = document.getElementById('uploadFile');
          const file = fileInput.files[0];

          if (!file) {
            Swal.showValidationMessage('Please select a file');
            return false;
          }

          const formData = new FormData();
          formData.append('file', file);

          return fetch(`/upload-akun`, {
            method: 'POST',
            body: formData
          })
            .then(response => {
              if (!response.ok) {
                throw new Error('Error uploading file.');
              }
              return response.json();
            })
            .then(data => {
              Swal.fire('File uploaded successfully!', '', 'success');
              window.location.reload();
            })
            .catch(error => {
              Swal.fire('Error!', 'Failed to upload file.', 'error');
            });
        }
      });
    
}
</script>
